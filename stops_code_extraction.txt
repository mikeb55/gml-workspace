EXTRACTED CODE CONTEXT - Sat Sep 20 15:41:17 GTBDT 2025
=====================================

========================================
FILE: ./GML-Guitar-Profiles-Library/src/core/PlayabilityChecker.js
MATCHES: 3
========================================
  validate(notes, options = {}) {
    const maxStretch = options.maxStretch || GUITAR_CONSTANTS.MAX_COMFORTABLE_SPAN;
    
    let isPlayable = true;
    const issues = [];
    
    // Check finger stretch
--
    if (frets.length > 0) {
      const stretch = Math.max(...frets) - Math.min(...frets);
      if (stretch > maxStretch) {
        isPlayable = false;
        issues.push({
          type: 'excessive_stretch',
          message: `Requires ${stretch} fret stretch`
--
    }
    
    return {
      isPlayable,
      issues,
      difficulty: issues.length * 20
    };

========================================
FILE: ./gml-riffgen/FretPositionOptimizer.js
MATCHES: 2
========================================

========================================
FILE: ./triadgen/Documents/gml-workspace/index.html
MATCHES: 1
========================================
        <div class="play-controls">
            <button onclick="testAudio()" id="testBtn">üîä Test Audio</button>
            <button onclick="playRiff()" id="playBtn" disabled>‚ñ∂Ô∏è Play Riff</button>
            <button onclick="stopRiff()" id="stopBtn" disabled>‚èπÔ∏è Stop</button>
            <button onclick="exportMusicXML()" id="exportBtn" class="export-btn" disabled>üìÑ Export MusicXML</button>
        </div>
        
--
            <p><strong>2. Generate:</strong> Click "Generate New Riff" - Export button should enable</p>
            <p><strong>3. Play:</strong> Click "Play Riff" to hear the generated music</p>
            <p><strong>4. Export:</strong> Click "Export MusicXML" - downloads .musicxml file</p>
            <p><strong>5. Open:</strong> Use downloaded file in MuseScore, Sibelius, or Finale</p>
        </div>
    </div>

--
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 1);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 1);
                
                debugLog('Test tone played successfully');
                
--
                gainNode.gain.exponentialRampToValueAtTime(0.001, startTime + duration);
                
                oscillator.start(startTime);
                oscillator.stop(startTime + duration);
                
            } catch (error) {
                debugLog('Play note failed: ' + error.message);
--
        function playRiffNow() {
            isPlaying = true;
            document.getElementById('playBtn').disabled = true;
            document.getElementById('stopBtn').disabled = false;
            
            const startTime = audioContext.currentTime + 0.1;
            
--
            
            const totalDuration = Math.max(...currentRiff.map(n => n.startTime + n.duration));
            setTimeout(() => {
                stopRiff();
            }, (totalDuration + 0.5) * 1000);
            
            debugLog('Riff playback started');
        }
        
        function stopRiff() {
            isPlaying = false;
            document.getElementById('playBtn').disabled = false;
            document.getElementById('stopBtn').disabled = true;
            debugLog('Riff playback stopped');
        }

        function exportMusicXML() {

========================================
FILE: ./triadgen/Documents/gml-workspace/final-working-midi.js
MATCHES: 1
========================================
console.log('\nüéâ SUCCESS! MIDI file is properly structured');
console.log('üìç Open test/test-output/verified-working.mid in:');
console.log('   - Windows Media Player (quick test)');
console.log('   - Guitar Pro or Sibelius (full test)');
ENDOFFILE
node final-working-midi.js

========================================
FILE: ./triadgen/Documents/gml-workspace/final-midi-fix.js
MATCHES: 1
========================================
  }
  
  console.log('\\nüéâ V1.2.0 MIDI Export VERIFIED WORKING!');
  console.log('Open verified.mid in Guitar Pro or Sibelius to confirm');
  
} catch (error) {
  console.error('‚ùå Test failed:', error.message);
